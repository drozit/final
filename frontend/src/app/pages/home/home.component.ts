import { Component, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { AuthService } from '../../services/auth.service';
import { RequestService } from '../../services/request.service';
import { TicketTypeService } from '../../services/ticket-type.service';
import { DepartmentService } from '../../services/department.service';
import { CommonModule } from '@angular/common';
import { firstValueFrom } from 'rxjs';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { saveAs } from 'file-saver';
import { Document, Packer, Paragraph, TextRun } from 'docx';

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css'],
})
export class HomeComponent implements OnInit {
  public requestData = {
    title: '',
    description: '',
  };
  user: any;
  ticketTypes: any[] = [];
  departments: any[] = [];
  requests: any[] = [];
  departmentRequests: any[] = []; // üîπ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞—è–≤–æ–∫ –æ—Ç–¥–µ–ª–∞
  newRequest = {
    title: '',
    description: '',
    ticket_type_id: null as number | null,
    department_id: null as number | null,
    user_id: null,
    username: '',
    email: '',
  };
  userRole: number | null = null;

  constructor(
    private authService: AuthService,
    private requestService: RequestService,
    private ticketTypeService: TicketTypeService,
    private departmentService: DepartmentService,
    private http: HttpClient // –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤

  ) {}

  async ngOnInit(): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
    const token = localStorage.getItem('token');
    if (!token) {
      console.error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      this.authService.redirectToLogin();  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
      return;  // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞
    }
  
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
    await this.loadUser();
    await this.loadTicketTypes();
    await this.loadDepartments();
    await this.loadUserRequests();
    await this.loadDepartmentRequests();  // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏ –æ—Ç–¥–µ–ª–∞
  }
  

  async loadUser(): Promise<void> {
    this.user = this.authService.getCurrentUser();
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', this.user); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç getCurrentUser()
    console.log('Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', this.user?.email);

    if (this.user) {
      this.newRequest.user_id = this.user.id;
      this.newRequest.username = this.user.username;
      this.newRequest.email = this.user.email;
      this.userRole = this.user.role_id || Number(localStorage.getItem('role'));
      console.log('–ó–∞–ø–æ–ª–Ω—è–µ–º newRequest:', this.newRequest); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ newRequest –µ—Å—Ç—å email

      const departmentFromStorage = localStorage.getItem('department');
      this.newRequest.department_id = departmentFromStorage
        ? JSON.parse(departmentFromStorage)
        : this.user.department_id;
    } else {
      alert('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');
      this.authService.redirectToLogin();
    }
  }

  async loadTicketTypes(): Promise<void> {
    try {
      this.ticketTypes = await firstValueFrom(this.ticketTypeService.getTicketTypes());
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –∑–∞—è–≤–æ–∫:', error);
    }
  }

  async loadDepartments(): Promise<void> {
    try {
      this.departments = await firstValueFrom(this.departmentService.getDepartments());
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª–æ–≤:', error);
    }
  }

  async loadUserRequests(): Promise<void> {
    if (!this.user || !this.userRole) {
      console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Ä–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã');
      return;
    }

    try {
      this.requests = await firstValueFrom(
        this.requestService.getUserRequests(this.user.id)
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫:', error);
    }
  }

  async loadDepartmentRequests(): Promise<void> {
    if (!this.user || !this.userRole || !this.newRequest.department_id) {
      return;
    }

    // –¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ç–¥–µ–ª–∞ (—Ä–æ–ª—å 2) –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –∑–∞—è–≤–∫–∏ —Å–≤–æ–µ–≥–æ –æ—Ç–¥–µ–ª–∞
    if (this.userRole === 2) {
      try {
        this.departmentRequests = await firstValueFrom(
          this.requestService.getDepartmentRequests(this.newRequest.department_id)
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫ –æ—Ç–¥–µ–ª–∞:', error);
      }
    }
  }

  updateRequestStatus(requestId: number, status: string): void {
    this.requestService.updateRequestStatus(requestId, status).subscribe(
      () => {
        console.log(`–ó–∞—è–≤–∫–∞ ${requestId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ: ${status}`);
        this.loadUserRequests();
        this.loadDepartmentRequests(); 
      },
      (error) => console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error)
    );
  }

  async submitRequest(): Promise<void> {
    const { title, description, ticket_type_id, department_id, user_id, username, email } =
      this.newRequest;
    let missingFields = [];

    if (!title) missingFields.push('–ó–∞–≥–æ–ª–æ–≤–æ–∫');
    if (!description) missingFields.push('–û–ø–∏—Å–∞–Ω–∏–µ');
    if (!ticket_type_id) missingFields.push('–¢–∏–ø –∑–∞—è–≤–∫–∏');
    if (!department_id) missingFields.push('–û—Ç–¥–µ–ª');
    if (!user_id) missingFields.push('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    if (!username) missingFields.push('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    if (!email) missingFields.push('Email');

    if (missingFields.length > 0) {
      alert(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ: ${missingFields.join(', ')}`);
      return;
    }

    try {
      const response = await firstValueFrom(this.requestService.addRequest(this.newRequest));
      alert('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');

      await this.loadUserRequests();
      await this.loadDepartmentRequests();

      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
      this.generateWordDocumentAndSendEmail();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.');
    }
  }

  async generateWordDocumentAndSendEmail() {
    if (!this.newRequest.title || !this.newRequest.description || !this.newRequest.ticket_type_id) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞.');
      return;
    }
  
    const doc = new Document({
      sections: [
        {
          properties: {},
          children: [
            new Paragraph({
              children: [
                new TextRun({
                  text: '–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
                  bold: true,
                  size: 32,
                }),
              ],
            }),
            new Paragraph(' '),
            new Paragraph(`üîπ –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${this.newRequest.title}`),
            new Paragraph(
              `üîπ –¢–∏–ø –∑–∞—è–≤–∫–∏: ${
                this.ticketTypes.find((t) => t.id === this.newRequest.ticket_type_id)?.name
              }`
            ),
            new Paragraph(
              `üîπ –û—Ç–¥–µ–ª: ${
                this.departments.find((d) => d.id === this.newRequest.department_id)?.name
              }`
            ),
            new Paragraph(`üîπ –û–ø–∏—Å–∞–Ω–∏–µ: ${this.newRequest.description}`),
            new Paragraph(`üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${this.newRequest.username}`),
          ],
        },
      ],
    });
  
    const blob = await Packer.toBlob(doc);
    const fileName = `–ó–∞—è–≤–∫–∞_${this.newRequest.title}.docx`;
    saveAs(blob, fileName);
  
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage
    const token = localStorage.getItem('token');
    if (!token) {
      console.error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
  
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    const formData = new FormData();
    console.log(this.newRequest); // –ü–µ—á–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ newRequest
    console.log(this.newRequest.department_id); // –ü—Ä–æ–≤–µ—Ä—è–µ—à—å, —á—Ç–æ department_id –Ω–µ –ø—É—Å—Ç–æ–µ
    formData.append('file', blob, fileName);
    formData.append('department', this.newRequest.department_id!.toString());
    formData.append('username', this.newRequest.username);
    formData.append('email', this.newRequest.email);
  
    fetch('http://localhost:3000/send-document', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
      },
      body: formData,
    })
      .then(response => response.json())
      .then(data => {
        console.log('–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', data);
      })
      .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
      });
  }

  onSubmitRequest(): void {
    // –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (!this.authService.isLoggedIn()) {
      console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ sendRequest –∏–∑ RequestsService –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    this.requestService.sendRequest(this.requestData).subscribe({
      next: (response) => {
        console.log('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', response);
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      },
      error: (err) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:', err);
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
      }
    });
  }
  
  updateStatus(requestId: number, status: string): void {
    this.requestService.updateRequestStatus(requestId, status).subscribe(
      (response) => {
        alert(`–ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ —Å—Ç–∞—Ç—É—Å–∞: ${status}`);
        this.loadUserRequests(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        this.loadDepartmentRequests(); // –ï—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ç–¥–µ–ª–∞
      },
      (error) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
      }
    );
  }
  

  onTicketTypeChange(event: Event): void {
    const selectElement = event.target as HTMLSelectElement;
    const ticketTypeId = +selectElement.value;
    const ticketType = this.ticketTypes.find((type) => type.id === ticketTypeId);

    if (ticketType) {
      this.newRequest.department_id = ticketType.department_id;
    } else {
      this.newRequest.department_id = null;
    }

    this.newRequest.ticket_type_id = ticketTypeId;
  }
}
