const mysql = require('mysql2');
const bcrypt = require('bcryptjs');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'root',
  database: 'support_system'  
});

db.connect(err => {
  if (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err);
    return;
  }
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ë–î');
});

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞—Ä–æ–ª—è–º–∏
db.query('SELECT id, username, password FROM users', async (err, results) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
    db.end();
    return;
  }

  console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${results.length}`);

  for (let user of results) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–æ–ª—å —É–∂–µ —Ö—ç—à–µ–º (bcrypt —Ö—ç—à–∏ –≤—Å–µ–≥–¥–∞ 60 —Å–∏–º–≤–æ–ª–æ–≤)
    if (user.password.length === 60) {
      console.log(`üîπ –ü—Ä–æ–ø—É—â–µ–Ω: ${user.username} (—É–∂–µ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω)`);
      continue;
    }

    try {
      const hashedPassword = await bcrypt.hash(user.password, 10);
      
      db.query('UPDATE users SET password = ? WHERE id = ?', [hashedPassword, user.id], (err) => {
        if (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è ${user.username}:`, err);
        } else {
          console.log(`‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è ${user.username}`);
        }
      });
    } catch (hashErr) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è ${user.username}:`, hashErr);
    }
  }

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
  db.end();
});
